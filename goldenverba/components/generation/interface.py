from collections.abc import AsyncIterator

from goldenverba.components.component import VerbaComponent
from goldenverba.server.types import ConversationItem, GeneratedMessage


class Generator(VerbaComponent):
    """
    Interface for Verba Generators.
    """

    def __init__(self):
        super().__init__()
        self.streamable = False
        self.context_window = 4000

    async def generate(
        self,
        queries: list[str],
        context: list[str],
        conversation: list[ConversationItem] = None,
    ) -> str:
        """Generate an answer based on a list of queries and list of contexts, and includes conversational context
        @parameter: queries : list[str] - List of queries
        @parameter: context : list[str] - List of contexts
        @parameter: conversation : dict - Conversational context
        @returns str - Answer generated by the Generator.
        """
        raise NotImplementedError("generate method must be implemented by a subclass.")

    async def generate_stream(
        self,
        queries: list[str],
        context: list[str],
        conversation: list[ConversationItem] = None,
    ) -> AsyncIterator[GeneratedMessage]:
        """Generate a stream of response dicts based on a list of queries and list of contexts, and includes conversational context
        @parameter: queries : list[str] - List of queries
        @parameter: context : list[str] - List of contexts
        @parameter: conversation : dict - Conversational context
        @returns Iterator[dict] - Token response generated by the Generator in this format {system:TOKEN, finish_reason:stop or empty}.
        """
        raise NotImplementedError(
            "generate_stream method must be implemented by a subclass."
        )
